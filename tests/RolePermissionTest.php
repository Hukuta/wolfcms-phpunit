<?php

require_once 'RolePermission.php';
require_once 'Permission.php';

/**
 * Test class for RolePermission.
 * Generated by PHPUnit on 2010-10-17 at 12:58:09.
 */
class RolePermissionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var RolePermission
     */
    protected $object;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new RolePermission();

        // Setup DB connection
        try {
            $PDO = new PDO(DB_DSN, DB_USER, DB_PASS);
        } catch (PDOException $error) {
            die('DB Connection failed: '.$error->getMessage());
        }
        
        $this->assertInstanceOf('PDO', $PDO);

        $PDO->getAttribute(PDO::ATTR_DRIVER_NAME);
        $PDO->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);

        Record::connection($PDO);
        Record::getConnection()->exec("set names 'utf8'");
        $this->PDO = $PDO;

        // Setup test table(s)
        $this->PDO->exec("CREATE TABLE role (
                id int(11) NOT NULL auto_increment,
                name varchar(25) NOT NULL,
                PRIMARY KEY  (id),
                UNIQUE KEY name (name)
            ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");

        $this->PDO->exec("CREATE TABLE role_permission (
                role_id int(11) NOT NULL,
                permission_id int(11) NOT NULL,
                UNIQUE KEY user_id (role_id,permission_id)
            ) ENGINE=MyISAM DEFAULT CHARSET=utf8");

        $this->PDO->exec("CREATE TABLE permission (
                id int(11) NOT NULL auto_increment,
                name varchar(25) NOT NULL,
                PRIMARY KEY  (id),
                UNIQUE KEY name (name)
            ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");

        // Insert test data
        $this->PDO->exec("INSERT INTO role (id, name) VALUES (1, 'administrator')");
        $this->PDO->exec("INSERT INTO role (id, name) VALUES (2, 'developer')");
        $this->PDO->exec("INSERT INTO role (id, name) VALUES (3, 'editor')");
        $this->PDO->exec("INSERT INTO role_permission (role_id, permission_id) VALUES (1, 1)");
        $this->PDO->exec("INSERT INTO permission (id, name) VALUES (1, 'administrator')");
        $this->PDO->exec("INSERT INTO permission (id, name) VALUES (2, 'developer')");
        $this->PDO->exec("INSERT INTO permission (id, name) VALUES (3, 'editor')");
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->object = null;
        $this->PDO->exec('DROP TABLE role');
        $this->PDO->exec('DROP TABLE role_permission');
        $this->PDO->exec('DROP TABLE permission');
    }


    /**
     * @todo Implement testSavePermissionsFor().
     */
    public function testSavePermissionsFor() {
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
        
        // Make sure the method exists
        $this->assertTrue(method_exists('RolePermission', 'savePermissionsFor'));
        
        $expected = array(new Permission(array('id' => 1, 'name' => 'administrator')),
                          new Permission(array('id' => 2, 'name' => 'developer')),
                          new Permission(array('id' => 3, 'name' => 'editor')),
                    );

        // Normal use, perms
        $actual = $this->object->savePermissionsFor(1, $expected);
        $this->assertInternalType('boolean', $actual);
        $this->assertTrue($actual);

        // Normal use, no perms
        $actual = $this->object->savePermissionsFor(1, array());
        $this->assertInternalType('boolean', $actual);
        $this->assertTrue($actual);

        // No such role
        $actual = $this->object->savePermissionsFor(2300, $expected);
        $this->assertInternalType('boolean', $actual);
        $this->assertFalse($actual);

        // No params
        $actual = $this->object->savePermissionsFor();
        $this->assertInternalType('boolean', $actual);
        $this->assertFalse($actual);
    }


    /**
     * @todo Implement testFindPermissionsFor().
     */
    public function testFindPermissionsFor() {
        // Make sure the method exists
        $this->assertTrue(method_exists('RolePermission', 'findPermissionsFor'));
        
        $expected = array(new Permission(array('id' => 1, 'name' => 'administrator')));

        // Normal use
        $actual = $this->object->findPermissionsFor(1);
        $this->assertInternalType('array', $actual);
        $this->assertEquals($expected, $actual);

        // String id instead of number
        $actual = $this->object->findPermissionsFor('1');
        $this->assertInternalType('array', $actual);
        $this->assertEquals($expected, $actual);

        // Non existing role
        $actual = $this->object->findPermissionsFor(2300);
        $this->assertInternalType('array', $actual);
        $this->assertEquals(array(), $actual);

        // Empty string param
        $actual = $this->object->findPermissionsFor('');
        $this->assertInternalType('array', $actual);
        $this->assertEquals(array(), $actual);

        // No param
        $actual = $this->object->findPermissionsFor();
        $this->assertInternalType('array', $actual);
        $this->assertEquals(array(), $actual);
    }

}

?>
