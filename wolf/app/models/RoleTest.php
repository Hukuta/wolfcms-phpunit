<?php

/**
 * Test class for Role.
 * Generated by PHPUnit on 2010-10-17 at 00:00:55.
 */
class RoleTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Role
     */
    protected $object;
    protected $PDO;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Role;

        // Setup DB connection
        try {
            $PDO = new PDO(DB_DSN, DB_USER, DB_PASS);
        } catch (PDOException $error) {
            die('DB Connection failed: '.$error->getMessage());
        }

        $driver = $PDO->getAttribute(PDO::ATTR_DRIVER_NAME);
        $PDO->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);

        Record::connection($PDO);
        Record::getConnection()->exec("set names 'utf8'");
        $this->PDO = $PDO;

        // Setup test table(s)
        $this->PDO->exec("CREATE TABLE role (
                id int(11) NOT NULL auto_increment,
                name varchar(25) NOT NULL,
                PRIMARY KEY  (id),
                UNIQUE KEY name (name)
            ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");

        $this->PDO->exec("CREATE TABLE ".TABLE_PREFIX."role_permission (
                role_id int(11) NOT NULL,
                permission_id int(11) NOT NULL,
                UNIQUE KEY user_id (role_id,permission_id)
            ) ENGINE=MyISAM DEFAULT CHARSET=utf8");

        $PDO->exec("CREATE TABLE ".TABLE_PREFIX."permission (
                id int(11) NOT NULL auto_increment,
                name varchar(25) NOT NULL,
                PRIMARY KEY  (id),
                UNIQUE KEY name (name)
            ) ENGINE=MyISAM  DEFAULT CHARSET=utf8");

        $PDO->exec("CREATE TABLE ".TABLE_PREFIX."user_role (
                user_id int(11) NOT NULL,
                role_id int(11) NOT NULL,
                UNIQUE KEY user_id (user_id,role_id)
            ) ENGINE=MyISAM DEFAULT CHARSET=utf8");

        // Insert test data
        $this->PDO->exec("INSERT INTO role (id, name) VALUES (1, 'administrator')");
        $this->PDO->exec("INSERT INTO role (id, name) VALUES (2, 'developer')");
        $this->PDO->exec("INSERT INTO role (id, name) VALUES (3, 'editor')");
        $this->PDO->exec("INSERT INTO role_permission (role_id, permission_id) VALUES (1, 1)");
        $this->PDO->exec("INSERT INTO permission (id, name) VALUES (1, 'administrator')");
        $this->PDO->exec("INSERT INTO permission (id, name) VALUES (2, 'developer')");
        $this->PDO->exec("INSERT INTO permission (id, name) VALUES (3, 'editor')");
        $this->PDO->exec("INSERT INTO user_role (user_id, role_id) VALUES (1, 1)");
        $this->PDO->exec("INSERT INTO user_role (user_id, role_id) VALUES (1, 2)");
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->PDO->exec('DROP TABLE role');
        $this->PDO->exec('DROP TABLE role_permission');
        $this->PDO->exec('DROP TABLE permission');
        $this->PDO->exec('DROP TABLE user_role');
    }


    /**
     * @todo Implement test__toString().
     */
    public function test__toString() {
        $expected = 'a role';
        $actual = new Role();
        $actual->name = 'a role';
        $actual = $actual->__toString();
        $this->assertEquals($expected, $actual);
    }


    /**
     * @todo Implement testPermissions().
     */
    public function testPermissions() {
        // Setup
        $this->object = Role::findById(1);
        $this->assertType('Role', $this->object);
        $this->assertNotNull($this->object);

        $expected = array('administrator' => new Permission(array('id' => '1', 'name' => 'administrator')));

        // Found perms for role
        $actual = $this->object->permissions();
        $this->assertType('array', $actual);
        $this->assertEquals($expected, $actual);
    }


    public function testHasPermission() {
        // Setup
        $this->object = Role::findById(1);
        $this->assertType('Role', $this->object);
        $this->assertNotNull($this->object);

        $actual = $this->object->hasPermission('administrator');
        $this->assertType('boolean', $actual);
        $this->assertTrue($actual);

        $actual = $this->object->hasPermission('administrator, developer');
        $this->assertType('boolean', $actual);
        $this->assertTrue($actual);

        $actual = $this->object->hasPermission('administrator,developer');
        $this->assertType('boolean', $actual);
        $this->assertTrue($actual);

        $actual = $this->object->hasPermission('');
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);

        $actual = $this->object->hasPermission();
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);
    }


    /**
     * 
     */
    public function testFindById() {
        // Setup
        Role::connection($this->PDO);
        $expected = new Role(array('id' => 2, 'name' => 'developer'));

        // Normal use
        $actual = Role::findById(2);
        $this->assertType('Role', $actual);
        $this->assertEquals($expected, $actual);

        // Param as string
        $actual = Role::findById('2');
        $this->assertType('Role', $actual);
        $this->assertEquals($expected, $actual);

        // Invalid string
        $actual = Role::findById('abc');
        $this->assertType('boolean', $actual);
        $this->assertNotEquals($expected, $actual);
        $this->assertFalse($actual);

        // No param
        $actual = Role::findById();
        $this->assertType('boolean', $actual);
        $this->assertNotEquals($expected, $actual);
        $this->assertFalse($actual);
    }


    /**
     * @todo Implement testFindByName().
     */
    public function testFindByName() {
        // Setup
        Role::connection($this->PDO);
        $expected = new Role(array('id' => 2, 'name' => 'developer'));

        // Normal use
        $actual = Role::findByName('developer');
        $this->assertType('Role', $actual);
        $this->assertEquals($expected, $actual);

        // Case test
        $actual = Role::findByName('DevelOper');
        $this->assertType('Role', $actual);
        $this->assertEquals($expected, $actual);

        // Empty string
        $actual = Role::findByName('');
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);

        // Invalid string
        $actual = Role::findByName('doesNotExist');
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);

        // No string
        $actual = Role::findByName(null);
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);

        // No param
        $actual = Role::findByName();
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);
    }


    /**
     * @todo Implement testFindByUserId().
     */
    public function testFindByUserId() {
        $expected = array(
            new Role(array('id' => 1, 'name' => 'administrator')),
            new Role(array('id' => 2, 'name' => 'developer'))
        );
        
        $actual = Role::findByUserId(1);
        $this->assertType('array', $actual);
        $this->assertEquals($expected, $actual);

        $actual = Role::findByUserId('1');
        $this->assertType('array', $actual);
        $this->assertEquals($expected, $actual);

        $actual = Role::findByUserId(2300);
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);

        $actual = Role::findByUserId('notValid');
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);

        $actual = Role::findByUserId();
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);

        $actual = Role::findByUserId(null);
        $this->assertType('boolean', $actual);
        $this->assertFalse($actual);
    }


    /**
     * 
     */
    public function testGetColumns() {
        $expected = array('id', 'name');
        $actual = $this->object->getColumns();

        $this->assertType('array', $actual);
        $this->assertEquals($expected, $actual);
    }

}

?>
